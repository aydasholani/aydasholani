name: Deploy to GitHub Pages
on:
  push:
    branches: 
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 14

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./build

      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     env:
#       REACT_APP_WEATHER_API_KEY: ${{ secrets.REACT_APP_WEATHER_API_KEY }}
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Detect package manager
#         id: detect-package-manager
#         run: |
#           if [ -f "${{ github.workspace }}/yarn.lock" ]; then
#             echo "manager=yarn" >> $GITHUB_OUTPUT
#             echo "command=install" >> $GITHUB_OUTPUT
#             echo "runner=yarn" >> $GITHUB_OUTPUT
#             exit 0
#           elif [ -f "${{ github.workspace }}/package.json" ]; then
#             echo "manager=npm" >> $GITHUB_OUTPUT
#             echo "command=ci" >> $GITHUB_OUTPUT
#             echo "runner=npx --no-install" >> $GITHUB_OUTPUT
#             exit 0
#           else
#             echo "Unable to determine package manager"
#             exit 1
#           fi

#       - name: Setup Node
#         uses: actions/setup-node@v4
#         with:
#           node-version: "14"
#           cache: ${{ steps.detect-package-manager.outputs.manager }}

#       - name: Install dependencies
#         run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

#       - name: Build project
#         run: ${{ steps.detect-package-manager.outputs.runner }} npm run build

#       - name: Upload build artifact
#         uses: actions/upload-pages-artifact@v3
#         with:
#           name: github-pages
#           path: ./build

#   deploy:
#     environment:
#       name: github-pages
#       url: ${{ steps.deployment.outputs.page_url }}
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Deploy to GitHub Pages
#         uses: actions/deploy-pages@v3
#         id: deployment
#         with:
#           name: github-pages